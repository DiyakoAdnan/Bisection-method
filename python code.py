# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PMwQ2bm-K8105C96kNBYj4-fz9kF-IRY
"""

def f(x):
    return x**3 - x - 1

def bisection_method(a, b, tol=1e-6, max_iter=100):
    if f(a) * f(b) > 0:
        raise ValueError("The function values at the interval endpoints must have different signs.")

    iter_count = 0
    while (b - a) / 2 > tol and iter_count < max_iter:
        c = (a + b) / 2
        if f(c) == 0:
            return c  # Found exact root
        elif f(c) * f(a) < 0:
            b = c
        else:
            a = c
        iter_count += 1

    return (a + b) / 2

# Example usage:
a = 1.0  # Lower bound of the interval
b = 2.0  # Upper bound of the interval
root = bisection_method(a, b)

print(f"Approximate root: {root}")
print(f"Function value at the root: {f(root)}")